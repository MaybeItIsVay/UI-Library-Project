--[[
    UI Library
    Description: A versatile and customizable UI library for Roblox.
    Author: [Your Name/Pseudonym]
    Version: 1.0
]]

-- // Services
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

-- // Local Player
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- // Library Tables
local Library = {}
Library.__index = Library

local Pages = {}
Pages.__index = Pages

local Sections = {}
Sections.__index = Sections

local Toggles = {}
Toggles.__index = Toggles

local Buttons = {}
Buttons.__index = Buttons

local Sliders = {}
Sliders.__index = Sliders

local Dropdowns = {}
Dropdowns.__index = Dropdowns

local MultiBoxes = {}
MultiBoxes.__index = MultiBoxes

local TextBoxes = {}
TextBoxes.__index = TextBoxes

local Keybinds = {}
Keybinds.__index = Keybinds

local ColorPickers = {}
ColorPickers.__index = ColorPickers

-- // Utility Functions
local Utility = {}

function Utility.CreateInstance(instanceType, properties)
    local instance = Instance.new(instanceType)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

function Utility.Draggable(frame, handle)
    local dragging = false
    local dragInput
    local dragStart
    local startPos

    local function Update(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        frame.Position = newPos
    end

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            Update(input)
        end
    end)
end

-- // Main Library Constructor
function Library:New(props)
    local window = {}

    -- // Main ScreenGui
    local ScreenGui = Utility.CreateInstance("ScreenGui", {
        Name = "UIScreenGui_" .. tostring(math.random(1, 10000)),
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
        ResetOnSpawn = false,
    })

    -- // Main Frame
    local MainFrame = Utility.CreateInstance("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        Size = UDim2.new(0, 500, 0, 300),
        Position = UDim2.new(0.5, -250, 0.5, -150),
        BackgroundColor3 = Color3.fromRGB(35, 35, 35),
        BorderSizePixel = 0,
        Active = true,
        Draggable = true,
        Visible = true,
    })

    -- // Header
    local Header = Utility.CreateInstance("Frame", {
        Name = "Header",
        Parent = MainFrame,
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        BorderSizePixel = 0,
    })

    local Title = Utility.CreateInstance("TextLabel", {
        Name = "Title",
        Parent = Header,
        Size = UDim2.new(1, 0, 1, 0),
        Text = props.Title or "UI Library",
        Font = Enum.Font.SourceSans,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        BorderSizePixel = 0,
    })

    -- // Make the window draggable
    Utility.Draggable(MainFrame, Header)

    -- // Container for pages
    local PagesContainer = Utility.CreateInstance("Frame", {
        Name = "PagesContainer",
        Parent = MainFrame,
        Size = UDim2.new(1, 0, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(45, 45, 45),
        BorderSizePixel = 0,
    })

    window.ScreenGui = ScreenGui
    window.MainFrame = MainFrame
    window.PagesContainer = PagesContainer
    window.Pages = {}

    function window:CreatePage(pageProps)
        local page = {}
        setmetatable(page, Pages)

        page.Parent = window
        page.Name = pageProps.Name or "New Page"

        -- // Page Button
        local PageButton = Utility.CreateInstance("TextButton", {
            Name = page.Name .. "Button",
            Parent = Header,
            Size = UDim2.new(0, 100, 1, 0),
            Position = UDim2.new(0, #window.Pages * 100, 0, 0),
            Text = page.Name,
            Font = Enum.Font.SourceSans,
            TextSize = 16,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundColor3 = Color3.fromRGB(25, 25, 25),
            BorderSizePixel = 0,
        })

        -- // Page Frame
        local PageFrame = Utility.CreateInstance("ScrollingFrame", {
            Name = page.Name .. "Frame",
            Parent = PagesContainer,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = #window.Pages == 0,
            BackgroundColor3 = Color3.fromRGB(45, 45, 45),
            BorderSizePixel = 0,
            CanvasSize = UDim2.new(0,0,0,0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
        })
        
        local UIListLayout = Utility.CreateInstance("UIListLayout", {
            Parent = PageFrame,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10),
        })

        PageButton.MouseButton1Click:Connect(function()
            for _, otherPage in pairs(window.Pages) do
                otherPage.Frame.Visible = false
            end
            PageFrame.Visible = true
        end)

        page.Frame = PageFrame
        page.Button = PageButton
        page.Sections = {}
        
        table.insert(window.Pages, page)

        return page
    end

    return window
end

function Pages:CreateSection(sectionProps)
    local section = {}
    setmetatable(section, Sections)
    
    section.Parent = self
    section.Name = sectionProps.Name or "New Section"
    
    -- // Section Frame
    local SectionFrame = Utility.CreateInstance("Frame", {
        Name = section.Name,
        Parent = self.Frame,
        Size = UDim2.new(1, -20, 0, 200),
        Position = UDim2.new(0, 10, 0, #self.Sections * 210),
        BackgroundColor3 = Color3.fromRGB(55, 55, 55),
        BorderSizePixel = 0,
        LayoutOrder = #self.Sections,
    })
    
    local UIListLayout = Utility.CreateInstance("UIListLayout", {
        Parent = SectionFrame,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
    })

    local SectionTitle = Utility.CreateInstance("TextLabel", {
        Name = "SectionTitle",
        Parent = SectionFrame,
        Size = UDim2.new(1, 0, 0, 30),
        Text = section.Name,
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundColor3 = Color3.fromRGB(45, 45, 45),
        BorderSizePixel = 0,
        LayoutOrder = -1,
    })

    section.Frame = SectionFrame
    section.Elements = {}
    
    table.insert(self.Sections, section)
    
    return section
end

function Sections:CreateToggle(toggleProps)
    local toggle = {}
    setmetatable(toggle, Toggles)

    toggle.Name = toggleProps.Name or "New Toggle"
    toggle.Callback = toggleProps.Callback or function() end

    local ToggleFrame = Utility.CreateInstance("Frame", {
        Name = toggle.Name,
        Parent = self.Frame,
        Size = UDim2.new(1, -10, 0, 25),
        BackgroundColor3 = Color3.fromRGB(65, 65, 65),
        BorderSizePixel = 0,
        LayoutOrder = #self.Elements,
    })

    local ToggleButton = Utility.CreateInstance("TextButton", {
        Name = "ToggleButton",
        Parent = ToggleFrame,
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(1, -25, 0.5, -10),
        Text = "",
        BackgroundColor3 = Color3.fromRGB(85, 85, 85),
        BorderSizePixel = 0,
    })

    local ToggleLabel = Utility.CreateInstance("TextLabel", {
        Name = "ToggleLabel",
        Parent = ToggleFrame,
        Size = UDim2.new(1, -30, 1, 0),
        Text = toggle.Name,
        Font = Enum.Font.SourceSans,
        TextSize = 14,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundColor3 = Color3.fromRGB(65, 65, 65),
        BorderSizePixel = 0,
    })
    
    local toggled = false
    ToggleButton.MouseButton1Click:Connect(function()
        toggled = not toggled
        ToggleButton.BackgroundColor3 = toggled and Color3.fromRGB(105, 185, 105) or Color3.fromRGB(85, 85, 85)
        toggle.Callback(toggled)
    end)
    
    table.insert(self.Elements, toggle)
    
    return toggle
end

return Library
