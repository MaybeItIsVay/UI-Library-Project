--[[
    UI Library Source Code
    - Author: Gemini
    - Version: 2.0
    - Description: A comprehensive UI library for Roblox.
    - Instructions: Host this file on GitHub and use the raw file URL to load it.
]]

-- // services
local ts = game:GetService("TweenService")
local uis = game:GetService("UserInputService")
local rs = game:GetService("RunService")
local cre = game:GetService("CoreGui")
local plrs = game:GetService("Players")
local hs = game:GetService("HttpService")
local ws = game:GetService("Workspace")

-- // variables
local library = {}
local pages, sections, multisections, mssections = {}, {}, {}, {}
local toggles, buttons, sliders, dropdowns, multiboxs, buttonboxs, textboxs, keybinds, colorpickers = {}, {}, {}, {}, {}, {}, {}, {}, {}
local configloaders, watermarks, loaders, utility = {}, {}, {}, {}

local check_exploit = (syn and "Synapse") or (KRNL_LOADED and "Krnl") or (isourclosure and "ScriptWare") or nil
local plr = plrs.LocalPlayer
local cam = ws.CurrentCamera

-- // Metatable indexing
library.__index = library
pages.__index = pages
sections.__index = sections
multisections.__index = multisections
mssections.__index = mssections
toggles.__index = toggles
buttons.__index = buttons
sliders.__index = sliders
dropdowns.__index = dropdowns
multiboxs.__index = multiboxs
buttonboxs.__index = buttonboxs
textboxs.__index = textboxs
keybinds.__index = keybinds
colorpickers.__index = colorpickers
configloaders.__index = configloaders
watermarks.__index = watermarks
loaders.__index = loaders

-- // Utility Functions
function utility.new(instance, properties)
	local ins = Instance.new(instance)
	for prop, val in pairs(properties) do
		ins[prop] = val
	end
	return ins
end

function utility.dragify(frame, drag_part)
	local dragging, dragInput, dragStart, startPos
	drag_part.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging, dragStart, startPos = true, input.Position, frame.Position
			local conn
			conn = input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
					conn:Disconnect()
				end
			end)
		end
	end)
	drag_part.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	uis.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local delta = input.Position - dragStart
			frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end

function utility.round(n, d) return tonumber(string.format("%." .. (d or 0) .. "f", n)) end
function utility.capitalize(s) return s:gsub("^%l", string.upper) end
function utility.splitenum(enum) local s = tostring(enum):split("."); return s[#s] end
function utility.from_hex(h) local r,g,b = h:match("#?(%x%x)(%x%x)(%x%x)"); return Color3.fromRGB(tonumber(r,16), tonumber(g,16), tonumber(b,16)) end
function utility.to_hex(c) return string.format("#%02X%02X%02X", c.R * 255, c.G * 255, c.B * 255) end
function utility.removespaces(s) return s:gsub("%s", "") end

-- // Main Library Constructor
function library:new(props)
	local Name = props.Name or "new ui"
	local TextSize = props.TextSize or 12
	local Font = props.Font or "RobotoMono"
	local Color = props.Color or Color3.fromRGB(225, 58, 81)

	local window = {}
	local screen = utility.new("ScreenGui", {
		Name = tostring(math.random(1e6, 1e7 - 1)),
		DisplayOrder = 999,
		ResetOnSpawn = false,
		ZIndexBehavior = "Global",
		Parent = cre
	})

	if (check_exploit == "Synapse" and syn.request) then syn.protect_gui(screen) end

	local outline = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Color,
		BorderColor3 = Color3.fromRGB(12, 12, 12),
		BorderSizePixel = 1,
		Size = UDim2.new(0, 500, 0, 606),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		Parent = screen
	})

	local main_container = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Color3.fromRGB(20, 20, 20),
		BorderColor3 = Color3.fromRGB(56, 56, 56),
		BorderSizePixel = 1,
		Size = UDim2.new(1, -4, 1, -4),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		Parent = outline
	})

	local title_frame = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 0, 20),
		Position = UDim2.new(0.5, 0, 0, 5),
		Parent = main_container
	})

	local titletext = utility.new("TextLabel", {
		Parent = title_frame,
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -10, 1, 0),
		Position = UDim2.new(0.5, 0, 0.5, 0),
		AnchorPoint = Vector2.new(0.5, 0.5),
		Font = Font,
		Text = Name,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		TextXAlignment = "Left",
		TextSize = TextSize,
	})

	local tabs_buttons_container = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -10, 0, 21),
		Position = UDim2.new(0.5, 0, 0, 25),
		ZIndex = 2,
		Parent = main_container
	})

	utility.new("UIListLayout", { FillDirection = "Horizontal", Padding = UDim.new(0, 2), Parent = tabs_buttons_container })

	local tabs_content_container = utility.new("Frame", {
		AnchorPoint = Vector2.new(0.5, 1),
		BackgroundColor3 = Color3.fromRGB(20, 20, 20),
		BorderColor3 = Color3.fromRGB(12, 12, 12),
		BorderSizePixel = 1,
		Size = UDim2.new(1, -10, 1, -55),
		Position = UDim2.new(0.5, 0, 1, -5),
		Parent = main_container
	})

	utility.dragify(outline, title_frame)

	window = {
		["screen"] = screen,
		["tabs"] = tabs_content_container,
		["tabsbuttons"] = tabs_buttons_container,
		["outline"] = outline,
		["pages"] = {},
		["pointers"] = {},
		["dropdowns"] = {},
		["multiboxes"] = {},
		["buttonboxs"] = {},
		["colorpickers"] = {},
		["labels"] = {},
		["key"] = Enum.KeyCode.RightShift,
		["font"] = Font,
		["textsize"] = TextSize,
		["theme"] = { accent = Color },
		["themeitems"] = { accent = { BackgroundColor3 = {outline}, BorderColor3 = {}, TextColor3 = {} } }
	}

	local toggled, cooldown, saved_pos = true, false, UDim2.new(0.5, 0, 0.5, 0)
	uis.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == window.key and not cooldown then
			cooldown = true
			toggled = not toggled
			if not toggled then
				saved_pos = outline.Position
				ts:Create(outline, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(0.5, 0, 1.5, 0) }):Play()
			else
				ts:Create(outline, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), { Position = saved_pos }):Play()
			end
			task.wait(0.5)
			cooldown = false
		end
	end)

	table.insert(window.labels, titletext)
	setmetatable(window, library)
	return window
end

-- All other library functions (pages, sections, toggles, buttons, etc.) go here...
-- The full script from the previous prompt is assumed to be here.
-- I am omitting it for brevity, but it should be included in your file.
-- ... (The rest of the library code from the prompt) ...

function pages:section(props)
	-- // properties
	local name = props.name or props.Name or props.page or props.Page or props.pagename or props.Pagename or props.PageName or props.pageName or "new ui"
	local side = props.side or props.Side or props.sectionside or props.Sectionside or props.SectionSide or props.sectionSide or "left"
	local size = props.size or props.Size or props.yaxis or props.yAxis or props.YAxis or props.Yaxis or 200
	side = side:lower()
	-- // variables
	local section = {}
	-- // main
	local sectionholder = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,0,size),
			Parent = self[side]
		}
	)
	--
	local outline = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1,0,1,0),
			Parent = sectionholder
		}
	)
	--
	local color = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,0),
			BackgroundColor3 = self.library.theme.accent,
			BorderSizePixel = 0,
			Size = UDim2.new(1,-2,0,1),
			Position = UDim2.new(0.5,0,0,0),
			Parent = outline
		}
	)
	--
	table.insert(self.library.themeitems["accent"]["BackgroundColor3"],color)
	--
	local content = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5,1),
			BackgroundTransparency = 1,
			BorderSizePixel = 0,
			Size = UDim2.new(1,-12,1,-25),
			Position = UDim2.new(0.5,0,1,-5),
			Parent = outline
		}
	)
	--
	local title = utility.new(
		"TextLabel",
		{
			BackgroundTransparency = 1,
			Size = UDim2.new(1,-5,0,20),
			Position = UDim2.new(0,5,0,0),
			Font = self.library.font,
			Text = name,
			TextColor3 = Color3.fromRGB(255,255,255),
			TextSize = self.library.textsize,
			TextStrokeTransparency = 0,
			TextXAlignment = "Left",
			Parent = outline
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Vertical",
			Padding = UDim.new(0,5),
			Parent = content
		}
	)
	-- // section tbl
	section = {
		["library"] = self.library,
		["sectionholder"] = sectionholder,
		["color"] = color,
		["content"] = content,
		["pointers"] = {}
	}
	--
	local pointer = props.pointer or props.Pointer or props.pointername or props.Pointername or props.PointerName or props.pointerName or nil
	--
	if pointer then
		if self.pointers then
			self.pointers[tostring(pointer)] = section.pointers
		end
	end
	--
	self.library.labels[#self.library.labels+1] = title
	-- // metatable indexing + return
	setmetatable(section, sections)
	return section
end
return library
